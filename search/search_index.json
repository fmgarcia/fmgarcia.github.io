{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"#using-emojis","title":"Using Emojis","text":"<p>I like to drink  after I played </p>"},{"location":"admonitions/","title":"Admonitions","text":"<p>Example of an admonition/callout with a title:</p> <p>Title of the callout</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Collapsible callout:</p> Collapsible callout <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p>"},{"location":"code-examples/","title":"Code examples","text":"<p>An example of a codeblock for Python:</p> add_numbers.py<pre><code># Function to add two numbers\ndef add_two_numbers(num1, num2):\n    return num1 + num2\n\n# Example usage\nresult = add_two_numbers(5, 3)\nprint('The sum is:', result)\n</code></pre> <p>Example codeblock for JavaScript with lines highlighted:</p> concatenate_strings.js<pre><code>// Function to concatenate two strings\nfunction concatenateStrings(str1, str2) {\n  return str1 + str2;\n}\n\n// Example usage\nconst result = concatenateStrings(\"Hello, \", \"World!\");\nconsole.log(\"The concatenated string is:\", result);\n</code></pre>"},{"location":"content-tabs/","title":"Content tabs","text":""},{"location":"content-tabs/#content-tabs","title":"Content Tabs","text":"<p>This is some examples of content tabs.</p>"},{"location":"content-tabs/#generic-content","title":"Generic Content","text":"Plain textUnordered listOrdered list <p>This is some plain text</p> <ul> <li>First item</li> <li>Second item</li> <li>Third item</li> </ul> <ol> <li>First item</li> <li>Second item</li> <li>Third item</li> </ol>"},{"location":"content-tabs/#code-blocks-in-content-tabs","title":"Code Blocks in Content Tabs","text":"PythonJavaScript <pre><code>def main():\n    print(\"Hello world!\")\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>function main() {\n    console.log(\"Hello world!\");\n}\n\nmain();\n</code></pre>"},{"location":"diagram-examples/","title":"Diagram Examples","text":""},{"location":"diagram-examples/#flowcharts","title":"Flowcharts","text":"<pre><code>graph LR\n  A[Start] --&gt; B{Failure?};\n  B --&gt;|Yes| C[Investigate...];\n  C --&gt; D[Debug];\n  D --&gt; B;\n  B ----&gt;|No| E[Success!];</code></pre>"},{"location":"diagram-examples/#sequence-diagrams","title":"Sequence Diagrams","text":"<pre><code>sequenceDiagram\n  autonumber\n  Server-&gt;&gt;Terminal: Send request\n  loop Health\n      Terminal-&gt;&gt;Terminal: Check for health\n  end\n  Note right of Terminal: System online\n  Terminal--&gt;&gt;Server: Everything is OK\n  Terminal-&gt;&gt;Database: Request customer data\n  Database--&gt;&gt;Terminal: Customer data</code></pre>"},{"location":"index001/","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"index001/#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"index001/#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"tema1/","title":"1. Introducci\u00f3n a la Programaci\u00f3n en Inteligencia Artificial","text":""},{"location":"tema1/#1-definicion-de-programa-informatico","title":"1. Definici\u00f3n de programa inform\u00e1tico","text":"<p>Un programa inform\u00e1tico es un conjunto secuencial de instrucciones escritas en un lenguaje de programaci\u00f3n, que una computadora interpreta para resolver un problema o realizar una tarea espec\u00edfica. Estas instrucciones se escriben como c\u00f3digo fuente legible por humanos, y luego se compilan o interpretan para generar el c\u00f3digo ejecutable que la m\u00e1quina puede procesar. En resumen, un programa inform\u00e1tico transforma datos de entrada en resultados deseados siguiendo los pasos definidos por el programador.</p>"},{"location":"tema1/#2-etapas-en-el-desarrollo-de-un-programa-informatico","title":"2. Etapas en el desarrollo de un programa inform\u00e1tico","text":"<p>El desarrollo de software sigue un ciclo de vida o proceso de desarrollo, com\u00fanmente dividido en etapas clave. Seg\u00fan diversas fuentes, las fases t\u00edpicas incluyen planificaci\u00f3n/definici\u00f3n de requisitos, an\u00e1lisis, dise\u00f1o, codificaci\u00f3n, pruebas, implementaci\u00f3n (despliegue) y mantenimiento. En t\u00e9rminos generales:</p> <ul> <li>Planificaci\u00f3n y requisitos: Definir objetivos del proyecto, alcance y recopilar necesidades del usuario.</li> <li>An\u00e1lisis: Especificar detalladamente qu\u00e9 debe hacer el programa y los datos que necesitar\u00e1.</li> <li>Dise\u00f1o: Determinar la arquitectura del software, estructuras de datos, algoritmos y tecnolog\u00eda a usar.</li> <li>Codificaci\u00f3n/implementaci\u00f3n: Traducir el dise\u00f1o a c\u00f3digo en el lenguaje elegido.</li> <li>Pruebas: Verificar el programa mediante pruebas unitarias, de integraci\u00f3n y validaci\u00f3n para asegurar que cumple los requisitos.</li> <li>Despliegue/operaci\u00f3n: Instalar el programa en el entorno de producci\u00f3n y verificar su funcionamiento real.</li> <li>Mantenimiento: Corregir errores, optimizar el rendimiento y actualizar el software seg\u00fan surjan nuevas necesidades.</li> </ul> <p>Este proceso iterativo (tambi\u00e9n conocido como SDLC) asegura un desarrollo ordenado y controlado del software, permitiendo retroalimentaci\u00f3n en cada fase.</p>"},{"location":"tema1/#3-lenguajes-de-programacion-y-su-evolucion","title":"3. Lenguajes de programaci\u00f3n y su evoluci\u00f3n","text":"<p>Los lenguajes de programaci\u00f3n han evolucionado desde los primitivos c\u00f3digo m\u00e1quina (n\u00fam. binarios) hasta los actuales lenguajes de alto nivel. Tradicionalmente se agrupan en generaciones: la 1\u00aa generaci\u00f3n es el c\u00f3digo m\u00e1quina (0s y 1s) y la 2\u00aa generaci\u00f3n incluye ensambladores simplificados; la 3\u00aa generaci\u00f3n comprende lenguajes de alto nivel independientes del hardware (por ejemplo Fortran, C, COBOL, Java). Posteriormente surgen herramientas de 4\u00aa generaci\u00f3n (bases de datos y lenguajes declarativos como SQL, Visual Basic) y las 5\u00aa generaci\u00f3n (lenguajes orientados a IA, l\u00f3gica y conocimiento, como Prolog o Lisp avanzado).</p> <p>A medida que avanzaba la evoluci\u00f3n, los lenguajes incorporaron nuevos paradigmas de programaci\u00f3n: la programaci\u00f3n estructurada (A\u00f1o 1970), la orientada a objetos (d\u00e9cada de 1980), la programaci\u00f3n funcional (como Haskell o Scala), y estilos imperativo, declarativo o concurrente. Cada nueva generaci\u00f3n aport\u00f3 mayor abstracci\u00f3n, sintaxis m\u00e1s amigable y librer\u00edas est\u00e1ndar. Por ejemplo, Python (creado por Guido van Rossum en 1991) es un lenguaje de alto nivel, interpretado y multiparadigma (soporta orientaci\u00f3n a objetos, programaci\u00f3n imperativa y funcional). Python hoy en d\u00eda es un ejemplo de lenguaje de tercera generaci\u00f3n muy popular por su sintaxis legible y su versatilidad. En general, la evoluci\u00f3n ha tendido a simplificar la expresi\u00f3n de algoritmos (reutilizando librer\u00edas, herramientas visuales, m\u00e1quinas virtuales) a costa de detalles de bajo nivel.</p>"},{"location":"tema1/#4-caracteristicas-de-lenguajes-orientados-a-inteligencia-artificial","title":"4. Caracter\u00edsticas de lenguajes orientados a inteligencia artificial","text":"<p>Los lenguajes id\u00f3neos para IA suelen tener las siguientes caracter\u00edsticas:</p> <ul> <li>Sintaxis clara y alto nivel de abstracci\u00f3n: Facilitan expresar algoritmos complejos de forma concisa. Por ejemplo, Python es conocido por su sintaxis legible y simple.</li> <li>Multiparadigma y flexibilidad: Deben soportar diferentes estilos (orientado a objetos, funcional, imperativo, simb\u00f3lico). Esto permite modelar ideas de IA (por ejemplo, programaci\u00f3n l\u00f3gica en Prolog, programaci\u00f3n funcional en Haskell) de manera natural.</li> <li>Gesti\u00f3n autom\u00e1tica de memoria y tipado din\u00e1mico: Facilitan el prototipado r\u00e1pido y reducen errores de bajo nivel. Aunque Python usa tipado din\u00e1mico, tiene librer\u00edas s\u00f3lidas para manejo de datos.</li> <li>Ricas librer\u00edas y frameworks especializados: Deben contar con amplios ecosistemas para c\u00e1lculo num\u00e9rico, \u00e1lgebra lineal y aprendizaje autom\u00e1tico. Por ejemplo, Python destaca en IA gracias a bibliotecas como NumPy, TensorFlow y PyTorch, mientras que R tiene m\u00faltiples paquetes estad\u00edsticos.</li> <li>Potentes operaciones de c\u00f3mputo cient\u00edfico: Soporte nativo de estructuras matem\u00e1ticas complejas (matrices, tensores) y operaciones vectorizadas. Python/NumPy, por ejemplo, implementa internamente en C operaciones muy r\u00e1pidas con arrays multidimensionales.</li> <li>Paralelismo y aceleraci\u00f3n hardware: Debe permitir aprovechar GPUs/TPUs u otras arquitecturas para entrenar modelos a gran escala. Lenguajes como Python, a trav\u00e9s de TensorFlow o PyTorch, ofrecen interfaces que gestionan la ejecuci\u00f3n en GPU/CUDA con alto rendimiento.</li> <li>Ecosistema activo y comunidad de soporte: Un lenguaje \u00fatil para IA tiene una gran comunidad que contribuye con tutoriales, foros (StackOverflow, GitHub) y actualizaciones constantes. Por ejemplo, Python cuenta con una comunidad global muy activa.</li> </ul> <p>En resumen, un buen lenguaje para IA combina facilidad de uso (r\u00e1pido desarrollo y pruebas) con capacidad de c\u00f3mputo (librer\u00edas optimizadas), adem\u00e1s de fuerte soporte comunitario. Python ejemplifica estos atributos: su sintaxis simple y amplio set de bibliotecas avanzadas lo hacen la elecci\u00f3n preferida para IA.</p>"},{"location":"tema1/#5-bibliotecas-relevantes-en-python-para-ia","title":"5. Bibliotecas relevantes en Python para IA","text":"<p>En Python existen muchas bibliotecas clave para IA y ciencia de datos. Algunas de las m\u00e1s importantes son:</p> <ul> <li>NumPy: Biblioteca fundamental para c\u00e1lculo num\u00e9rico. Proporciona el objeto <code>ndarray</code> para arreglos n-dimensionales homog\u00e9neos y funciones de \u00e1lgebra lineal optimizadas. NumPy est\u00e1 dise\u00f1ada para operaciones matem\u00e1ticas de alto rendimiento con vectores/matrices. Ejemplo de uso:</li> </ul> <pre><code>import numpy as np\narr = np.array([1, 2, 3])\nprint(arr.dtype, arr.shape)\n</code></pre> <p>NumPy sirve como base de muchas otras librer\u00edas (SciPy, Pandas, TensorFlow) y acelera los c\u00e1lculos intensivos.</p> <ul> <li>pandas: Biblioteca para manipulaci\u00f3n y an\u00e1lisis de datos tabulares. Ofrece estructuras como <code>DataFrame</code> (tablas bidimensionales con etiquetas) y <code>Series</code>. Pandas est\u00e1 dise\u00f1ada espec\u00edficamente para an\u00e1lisis de datos en Python, y es potente, flexible y f\u00e1cil de usar. Permite cargar datos (CSV, bases SQL, etc.), limpiarlos y transformarlos eficientemente. Ejemplo:</li> </ul> <pre><code>import pandas as pd\ndf = pd.DataFrame({\n    'nombre': ['Ana', 'Luis', 'Marta'],\n    'edad': [28, 34, 22]\n})\nprint(df.describe())\n</code></pre> <p>Pandas agiliza tareas de data wrangling esenciales antes de entrenar modelos de IA.</p> <ul> <li>TensorFlow: Framework de c\u00f3digo abierto de Google para aprendizaje autom\u00e1tico y Deep Learning. TensorFlow facilita la construcci\u00f3n, entrenamiento y despliegue de redes neuronales complejas. Es uno de los frameworks de ML m\u00e1s usados en la industria por su flexibilidad y escalabilidad. Se basa en tensores y grafos computacionales, y soporta ejecuci\u00f3n en CPU, GPU y m\u00f3viles. Ejemplo b\u00e1sico con TensorFlow:</li> </ul> <pre><code>import tensorflow as tf\na = tf.constant([[1, 2], [3, 4]])\nprint(a @ a)  # multiplicaci\u00f3n de matrices\n</code></pre> <p>Adem\u00e1s, TensorFlow incluye Keras (API de alto nivel) y herramientas para servir modelos en producci\u00f3n.</p> <ul> <li>PyTorch: Biblioteca de Deep Learning de c\u00f3digo abierto creada por Facebook (Meta). PyTorch permite definir redes neuronales de forma imperativa (din\u00e1micamente en tiempo de ejecuci\u00f3n) con sintaxis clara de Python. Es muy utilizado en investigaci\u00f3n acad\u00e9mica por su flexibilidad y facilidad de uso. PyTorch integra autograd (c\u00e1lculo autom\u00e1tico de gradientes) y soporta GPUs. Ejemplo r\u00e1pido con PyTorch:</li> </ul> <pre><code>import torch\nx = torch.tensor([1.0, 2.0, 3.0])\nprint(x.mean())  # c\u00e1lculo de media con backprop\n</code></pre> <p>PyTorch ofrece tambi\u00e9n modelos preentrenados y una comunidad creciente (ecosistema torch).</p> <ul> <li>scikit-learn: Biblioteca para machine learning tradicional. Incluye algoritmos de clasificaci\u00f3n, regresi\u00f3n, clustering, reducci\u00f3n de dimensionalidad, etc. Scikit-learn se centra en modelos \u201ccl\u00e1sicos\u201d (SVM, \u00e1rboles de decisi\u00f3n, regresi\u00f3n log\u00edstica, etc.) y es muy valorada por su simplicidad y eficiencia. Permite hacer validaci\u00f3n cruzada, preprocesamiento de datos y evaluar f\u00e1cilmente modelos. Ejemplo de uso:</li> </ul> <pre><code>from sklearn import datasets, linear_model\ndiabetes = datasets.load_diabetes()\nX, y = diabetes.data, diabetes.target\nmodel = linear_model.LinearRegression()\nmodel.fit(X, y)\nprint(\"Score:\", model.score(X, y))\n</code></pre> <p>Scikit-learn es ideal para prototipar modelos de ML r\u00e1pidamente con una API unificada.</p> <p>Cada una de estas bibliotecas cuenta con documentaci\u00f3n oficial extensa y comunidad activa. Por ejemplo, TensorFlow y PyTorch ofrecen tutoriales y foros (GitHub, discusiones) espec\u00edficos; NumPy y pandas tienen p\u00e1ginas de referencia con gu\u00edas de uso. Su integraci\u00f3n en Python permite combinar f\u00e1cilmente diferentes herramientas: por ejemplo, usar NumPy/Pandas para preparar datos, luego TensorFlow/PyTorch para entrenar una red, y finalmente scikit-learn para an\u00e1lisis adicionales. Esta riqueza de bibliotecas es una de las razones por las que Python es tan dominante en IA.</p>"},{"location":"tema1/#6-consideraciones-de-rendimiento-en-ia","title":"6. Consideraciones de rendimiento en IA","text":"<p>El rendimiento de ejecuci\u00f3n es cr\u00edtico en IA debido a los grandes vol\u00famenes de datos y la complejidad de los algoritmos. En general, los lenguajes compilados (C, C++, Java) son m\u00e1s r\u00e1pidos en tiempo de ejecuci\u00f3n que los interpretados (como Python); sin embargo, Python mitiga esta diferencia al delegar operaciones num\u00e9ricas intensivas a extensiones en C/C++. Por ejemplo, NumPy est\u00e1 implementado en C y logra alto rendimiento en c\u00e1lculos con matrices. Asimismo, TensorFlow y PyTorch ejecutan internamente operaciones en C/C++ o en GPU, maximizando la velocidad pese a que el c\u00f3digo fuente sea escrito en Python.</p> <p>En proyectos de IA es com\u00fan aprovechar aceleradores hardware. GPU (procesador gr\u00e1fico) y TPU permiten procesar redes neuronales en paralelo mucho m\u00e1s r\u00e1pido que la CPU tradicional. Las bibliotecas modernas reconocen esto: TensorFlow y PyTorch tienen soporte integrado para GPUs, por lo que entrenar modelos grandes puede reducirse de d\u00edas a horas. Asimismo, el rendimiento del software mejora con t\u00e9cnicas como batching, vectorizaci\u00f3n de operaciones (gracias a NumPy) y compilaci\u00f3n just-in-time (p.ej. Numba).</p> <p>Otro factor es la memoria y escalabilidad. Modelos IA complejos consumen mucha RAM y ancho de memoria (para par\u00e1metros y operaciones intermedias). Elegir un lenguaje/framework eficiente en uso de memoria es clave. Por ejemplo, TensorFlow es dise\u00f1ado para ser escalable y desplegable en producci\u00f3n. Adem\u00e1s, lenguajes con gesti\u00f3n autom\u00e1tica de memoria (Python, Java) simplifican el desarrollo, aunque puede haber sobrecarga (garbage collector).</p> <p>En s\u00edntesis, el rendimiento en IA depende m\u00e1s del uso de frameworks y librer\u00edas optimizadas que del lenguaje en s\u00ed. Python, a pesar de su menor velocidad pura, suele alcanzar rendimiento competitivo porque apalanca librer\u00edas eficientes. Al final, la clave es usar herramientas que se ejecuten en C/C++ o hardware especializado, y emplear paralelismo y vectores para maximizar la velocidad en el entrenamiento y la inferencia de modelos.</p>"},{"location":"tema1/#7-herramientas-de-desarrollo-comunes","title":"7. Herramientas de desarrollo comunes","text":"<p>Para programar en IA con Python y otros lenguajes se emplean diversas herramientas de desarrollo:</p> <ul> <li>Entornos de desarrollo integrados (IDEs): Ofrecen edici\u00f3n de c\u00f3digo, depuraci\u00f3n y autocompletado. Ejemplos populares para Python incluyen PyCharm (JetBrains) y Visual Studio Code (con extensiones de Python). Para R es com\u00fan RStudio. Existen tambi\u00e9n entornos cient\u00edficos como Spyder. Estos IDEs aceleran el desarrollo mostrando errores en tiempo real y gestionando proyectos.</li> <li>Notebooks interactivos: Herramientas como Jupyter Notebook/Lab o Google Colab permiten combinar c\u00f3digo, gr\u00e1ficos y texto en un mismo documento. Son muy \u00fatiles para prototipado y visualizaci\u00f3n de datos. Jupyter, por ejemplo, es un entorno interactivo que soporta Python y otros lenguajes y facilita compartir experimentos en la web. Google Colab a\u00f1ade recursos gratuitos de GPU.</li> <li>Entornos virtuales: Son instalaciones aisladas de Python para cada proyecto. Usando <code>venv</code> (incluido en Python) o conda (Anaconda), se puede crear un \u201centorno\u201d independiente con versiones espec\u00edficas de paquetes. Esto evita conflictos entre proyectos y facilita gestionar dependencias. Por ejemplo, <code>python -m venv .env</code> crea un entorno nuevo en la carpeta del proyecto. Se recomienda siempre activar un entorno virtual al iniciar el desarrollo.</li> <li>Control de versiones: Es esencial usar sistemas como Git para rastrear cambios en el c\u00f3digo, colaborar y gestionar historial. Git (y plataformas como GitHub/GitLab) permite a equipos coordinarse sin pisarse el c\u00f3digo mutuamente. El control de versiones mejora la productividad al poder volver a estados anteriores y revisar diferencias. Por ejemplo, con Git se commit, push y merge ramas para trabajar en paralelo. Atlassian Git Tutorial define el control de versiones como la pr\u00e1ctica de gestionar cambios en el c\u00f3digo de forma coordinada.</li> <li>Otras herramientas: Los desarrolladores de IA suelen usar herramientas adicionales como pip o pipenv (para gesti\u00f3n de paquetes en Python), Docker (contenedores para entornos reproducibles), Jenkins/GitHub Actions (integraci\u00f3n continua), etc. Para notebooks cient\u00edficos se integran bibliotecas de visualizaci\u00f3n (Matplotlib, Seaborn) y depuradores de Python.</li> </ul> <p>Estas herramientas potencian el desarrollo: los IDEs y notebooks aceleran la escritura y prueba de c\u00f3digo, los entornos virtuales evitan incompatibilidades, y el control de versiones garantiza desarrollo \u00e1gil y colaborativo. Adicionalmente, las comunidades proporcionan extensiones y plugins espec\u00edficos para IA (por ejemplo, extensiones de VSCode para Jupyter o TensorFlow).</p>"},{"location":"tema1/#8-soporte-comunidades-documentacion-y-mantenimiento","title":"8. Soporte: comunidades, documentaci\u00f3n y mantenimiento","text":"<p>El soporte comunitario y la documentaci\u00f3n son cruciales para cualquier tecnolog\u00eda de IA. A continuaci\u00f3n se destaca el ecosistema de algunos lenguajes y herramientas principales:</p> <ul> <li>Python: Respaldado por la Python Software Foundation (PSF), cuenta con documentaci\u00f3n oficial muy completa (docs.python.org) y un ciclo de actualizaciones activo (por ejemplo, Python 3.13.4 fue lanzado en abril de 2025). Existe una gran comunidad global (foros, StackOverflow, grupos de usuarios) que contribuye con soluciones y paquetes. Adem\u00e1s, PyPI es el repositorio centralizado de librer\u00edas (m\u00e1s de 400K paquetes). Los desarrolladores pueden reportar problemas en GitHub o usar foros como StackOverflow para obtener ayuda.</li> <li>R: Tiene la comunidad de R Consortium y CRAN (repositorio de paquetes). R publica versiones regulares (la 4.4.1 en junio de 2024). Existe amplia documentaci\u00f3n (The R Manual) y comunidades (StackOverflow, R-Users, foros acad\u00e9micos). Sus paquetes (ggplot2, dplyr, etc.) se actualizan frecuentemente y cuentan con documentaci\u00f3n de referencia.</li> <li>Java: Oracle mantiene OpenJDK, con versiones nuevas anualmente. Documentaci\u00f3n oficial (Oracle Docs) y comunidades como Oracle Java Community o StackOverflow cubren dudas. Para IA hay frameworks como Weka o Deeplearning4j con sus propias comunidades. Al ser un lenguaje empresarial, tiene soporte de grandes empresas (Oracle, IBM, Red Hat) y est\u00e1ndares de la industria.</li> <li>JavaScript/Node.js: JavaScript tiene respaldo de ECMA (est\u00e1ndar ECMAScript). Su documentaci\u00f3n (MDN Web Docs) es extensa. Para IA surgieron librer\u00edas como TensorFlow.js o Brain.js; TensorFlow.js, por ejemplo, es mantenido por Google y tiene tutoriales oficiales. Node.js, plataforma de servidor basada en JS, tiene una comunidad activa (Node.js Foundation) y repositorio de paquetes NPM. Ambas tecnolog\u00edas cuentan con foros, cursos y grupos de usuarios (por ejemplo, la comunidad JS de GitHub supera millones de desarrolladores).</li> <li>JSON: Aunque no es un lenguaje de programaci\u00f3n sino un formato de datos, merece menci\u00f3n. JSON est\u00e1 estandarizado en RFC 8259 y proviene de especificaciones de JavaScript. Es mantenido como est\u00e1ndar abierto (JSON.org). Tiene una comunidad amplia porque es el formato de intercambio de datos universal en APIs web. La documentaci\u00f3n de JSON (por ejemplo, por IETF/ECMA) est\u00e1 libremente disponible.</li> </ul> <p>En resumen, todos estos lenguajes/formats tienen fuerte soporte comunitario y buena documentaci\u00f3n. Python, por ejemplo, exhibe actualizaciones regulares (con planes a varios a\u00f1os vista). Las bibliotecas de IA en Python (TensorFlow, PyTorch, scikit-learn) provienen de organizaciones l\u00edderes (Google, Meta, INRAE) y publican nuevas versiones peri\u00f3dicamente con mejoras. Las comunidades en l\u00ednea (StackOverflow, Reddit, foros especializados) son muy activas; por ejemplo, las etiquetas \u201cpython\u201d o \u201cmachine-learning\u201d en StackOverflow cuentan con decenas de miles de preguntas resueltas. Todo esto asegura que los desarrolladores de IA encuentren tutoriales, ejemplos y ayuda f\u00e1cilmente, y que los proyectos se mantengan actualizados y seguros.</p>"},{"location":"tema1/#9-principales-lenguajes-de-programacion-para-ia","title":"9. Principales lenguajes de programaci\u00f3n para IA","text":"<p>A continuaci\u00f3n se analiza cada lenguaje solicitado, enfoc\u00e1ndose en su uso en IA:</p> Lenguaje Paradigma / Tipado Uso en IA y librer\u00edas destacadas Python Alto nivel, multiparadigma (orientado a objetos, funcional); tipado din\u00e1mico. Es el lenguaje principal para IA hoy d\u00eda. Su amplia comunidad y librer\u00edas (TensorFlow, PyTorch, scikit-learn, pandas, etc.) lo hacen ideal. Simplifica prototipado de modelos con sintaxis clara; sin embargo, su ejecuci\u00f3n pura es m\u00e1s lenta que C++, aunque se compensa con extensiones optimizadas y GPU. R Multiparadigma: estad\u00edstico/funcional, tipado din\u00e1mico. Dise\u00f1ado para an\u00e1lisis estad\u00edstico y miner\u00eda de datos. Muy usado en investigaci\u00f3n y data science. Tiene paquetes IA (caret, randomForest, xgboost, TensorFlow para R) y es potente en visualizaci\u00f3n. Ventaja en estad\u00edsticas y gr\u00e1ficos; menos usado para sistemas de producci\u00f3n debido a rendimiento y sintaxis menos general. Java Lenguaje compilado a bytecode (JVM), orientado a objetos; tipado est\u00e1tico. Aunque no es de los m\u00e1s usados en investigaci\u00f3n de IA, Java se emplea en entornos de producci\u00f3n empresariales. Existen bibliotecas de ML/IA (Weka, Deeplearning4j, Java-ML) y frameworks web de servicios IA. Destaca por su robustez, optimizaci\u00f3n de memoria y concurrencia nativa. Puntos fuertes: portabilidad (\u201cwrite once, run anywhere\u201d), rendimiento mejor que Python puro. Inconveniente: sintaxis m\u00e1s verbosa y ecosistema de IA m\u00e1s reducido comparado con Python. JavaScript Lenguaje interpretado, multiparadigma (event-driven, funcional, imperativo); tipado din\u00e1mico. Tradicionalmente usado en navegador web, ahora con TensorFlow.js y ML5.js se puede ejecutar modelos de IA directamente en clientes web. JavaScript permite prototipos r\u00e1pidos de IA para p\u00e1ginas web (reconocimiento de imagen en navegador, por ejemplo). Ventajas: ubicuidad en web y entorno Node.js. Desventaja: rendimiento limitado (V8), no tan optimizado para c\u00f3mputos pesados (aunque TensorFlow.js usa WebGL). Node.js Entorno de ejecuci\u00f3n de JavaScript en servidor (no lenguaje distinto). Permite usar JavaScript (y librer\u00edas de IA en JS) en el back-end. Puede ejecutar TensorFlow.js o llamadas a Python. \u00datil para integrar IA en aplicaciones web/server. Comparte ventajas de JS (asim\u00e9trico, NPM) y permite paralelismo I/O. No es un lenguaje de IA en s\u00ed, pero su ecosistema permite construir APIs de IA. JSON Formato de intercambio de datos (sintaxis basada en JavaScript). No es Turing completo. JSON se utiliza para transportar datos (p. ej. resultados de modelos, par\u00e1metros) entre clientes y servidores. No permite programaci\u00f3n de l\u00f3gica, pero es fundamental en APIs REST y para guardar configuraciones ligeras de IA. Ventajas: legible, port\u00e1til entre lenguajes y ampliamente soportado. Inconveniente: No tiene conceptos de programa, solo datos. <p>Estos lenguajes difieren en paradigmas y usos, pero todos encuentran aplicaci\u00f3n en proyectos de IA. Python domina por su equilibrio entre facilidad y potencia, R destaca en an\u00e1lisis estad\u00edstico, Java en entornos empresariales, JavaScript/Node permiten IA en la web, y JSON sirve para intercambiar datos. Eligiendo uno u otro depender\u00e1 de los requisitos: por ejemplo, Python para experimentos y prototipos r\u00e1pidos; Java para sistemas escalables; JavaScript para interfaces web interactivas; R para an\u00e1lisis exploratorio; JSON para formatos de configuraci\u00f3n y comunicaci\u00f3n.</p>"},{"location":"tema1/#10-lenguajes-de-marcado-html-xml-y-yaml","title":"10. Lenguajes de marcado: HTML, XML y YAML","text":"<p>Los lenguajes de marcado definen estructuras de datos o documentos mediante etiquetas. Se explican sus usos y etiquetas m\u00e1s comunes:</p> <ul> <li>HTML (HyperText Markup Language): Lenguaje est\u00e1ndar para estructurar documentos web. Un documento HTML t\u00edpico tiene esta forma:</li> </ul> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;P\u00e1gina de Ejemplo&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;Encabezado&lt;/h1&gt;\n    &lt;p&gt;Este es un p\u00e1rrafo de texto.&lt;/p&gt;\n    &lt;a href=\"https://example.com\"&gt;Enlace&lt;/a&gt;\n    &lt;img src=\"imagen.jpg\" alt=\"Texto alternativo\"/&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <ul> <li> <p>Etiquetas comunes: <code>&lt;html&gt;</code> (ra\u00edz), <code>&lt;head&gt;</code> (metadatos como <code>&lt;title&gt;</code>), <code>&lt;body&gt;</code> (contenido visible), <code>&lt;h1&gt;</code>\u2013<code>&lt;h6&gt;</code> (cabeceras de texto), <code>&lt;p&gt;</code> (p\u00e1rrafo), <code>&lt;a href=\"URL\"&gt;</code> (hiperv\u00ednculo), <code>&lt;img src=\"...\" alt=\"...\"&gt;</code> (imagen), <code>&lt;div&gt;</code>, <code>&lt;span&gt;</code>, <code>&lt;ul&gt;</code>, <code>&lt;li&gt;</code>, <code>&lt;table&gt;</code>, <code>&lt;form&gt;</code>, entre otras. Cada etiqueta define secciones o elementos de la p\u00e1gina. El navegador interpreta estas etiquetas para renderizar la p\u00e1gina web.</p> </li> <li> <p>XML (eXtensible Markup Language): Formato de texto para almacenar y transportar datos. Es auto-descriptivo: las etiquetas las define el propio usuario seg\u00fan conveniencia. Por ejemplo:</p> </li> </ul> <pre><code>&lt;persona&gt;\n  &lt;nombre&gt;Alicia&lt;/nombre&gt;\n  &lt;edad&gt;30&lt;/edad&gt;\n  &lt;ciudad&gt;Madrid&lt;/ciudad&gt;\n&lt;/persona&gt;\n</code></pre> <p>En este caso, <code>&lt;persona&gt;</code>, <code>&lt;nombre&gt;</code>, <code>&lt;edad&gt;</code>, <code>&lt;ciudad&gt;</code> son etiquetas personalizadas. XML exige que los elementos est\u00e9n bien formados (cada etiqueta abierta debe cerrarse). Se utiliza en configuraciones (p. ej. archivos de Spring, Android), en intercambio de datos (SOAP, RSS) y en bases de datos XML. Las etiquetas m\u00e1s comunes dependen del esquema definido; por s\u00ed mismo XML no impone etiquetas fijas, sino estructuras jer\u00e1rquicas de elementos.</p> <ul> <li>YAML (YAML Ain\u2019t Markup Language): Aunque su nombre incluye \u201cMark-up Language\u201d, es en realidad un lenguaje de serializaci\u00f3n de datos f\u00e1cil de leer. Se usa principalmente para archivos de configuraci\u00f3n. La sintaxis est\u00e1 basada en indentaci\u00f3n. Ejemplo:</li> </ul> <pre><code>persona:\n  nombre: \"Alicia\"\n  edad: 30\n  habilidades:\n    - Python\n    - \"Aprendizaje Autom\u00e1tico\"\n</code></pre> <p>En YAML, los niveles de indentaci\u00f3n definen la jerarqu\u00eda de datos. Las listas se indican con guiones (<code>-</code>). Se enfatiza la legibilidad para humanos. No tiene \u201cetiquetas\u201d como HTML/XML, sino pares <code>clave: valor</code>. Aunque YAML se considera \u201cno marcado\u201d (de ah\u00ed su acr\u00f3nimo), comparte la idea de estructurar datos (a diferencia de c\u00f3digo de programaci\u00f3n).</p> <p>Resumen de etiquetas comunes: en HTML se usan etiquetas sem\u00e1nticas (<code>&lt;p&gt;</code>, <code>&lt;h1&gt;</code>, <code>&lt;a&gt;</code>, <code>&lt;img&gt;</code>, <code>&lt;table&gt;</code>, <code>&lt;form&gt;</code>, etc.) para dar significado al contenido. XML acepta cualquier etiqueta v\u00e1lida (por ejemplo, <code>&lt;item&gt;</code>, <code>&lt;title&gt;</code> en RSS). YAML no usa etiquetas, pero s\u00ed sintaxis clave-valor. Su elecci\u00f3n depende del contexto: HTML para la web, XML/YAML para datos y configuraci\u00f3n.</p> <p>Fuentes: La informaci\u00f3n de HTML se basa en la referencia oficial de MDN Web Docs (Mozilla) sobre elementos HTML; la definici\u00f3n de YAML proviene de Red Hat; JSON se describe en la documentaci\u00f3n de IBM. Otros puntos est\u00e1n asentados en la pr\u00e1ctica est\u00e1ndar de desarrollo de software y fuentes educativas citadas. Cada secci\u00f3n incorpora c\u00f3digo de ejemplo ilustrativo seg\u00fan corresponde.</p>"},{"location":"tema2/","title":"2. Fundamentos de Programaci\u00f3n en Python","text":""},{"location":"tema2/#1-introduccion-a-python","title":"1. Introducci\u00f3n a Python","text":"<p>Python es un lenguaje de programaci\u00f3n de alto nivel dise\u00f1ado para la legibilidad y productividad. Fue creado a finales de los a\u00f1os 80 por Guido van Rossum, bas\u00e1ndose en el lenguaje educativo ABC, y lanzado p\u00fablicamente en 1991. Destacan en Python su sintaxis clara (usa indentaci\u00f3n en lugar de llaves), tipado din\u00e1mico y fuerte apoyo a paradigmas multi-paradigma (procedural, orientado a objetos, funcional, etc.). Python se distribuye con un int\u00e9rprete multiplataforma y una biblioteca est\u00e1ndar muy amplia.</p> <ul> <li>Historia: Naci\u00f3 en 1989 como continuaci\u00f3n de ABC, lanz\u00e1ndose la primera versi\u00f3n en 1991. Guido van Rossum lo dise\u00f1\u00f3 como un lenguaje f\u00e1cil de aprender, potente para scripting y extensible en C/C++.</li> <li>Caracter\u00edsticas clave: Tipado din\u00e1mico, recolector de basura, soporte integrado para estructuras de datos (listas, diccionarios, etc.), bater\u00edas incluidas (gran librer\u00eda est\u00e1ndar) y un dise\u00f1o enfocado en la legibilidad del c\u00f3digo. Su sintaxis enfatiza la identaci\u00f3n de bloques, no usa puntos y coma (salvo opcionalmente) ni llaves para delimitar bloques de c\u00f3digo.</li> <li>Uso actual: Se usa desde scripts simples hasta servidores web de gran escala, interfaces gr\u00e1ficas, aplicaciones cient\u00edficas y ense\u00f1anza de programaci\u00f3n. Su comunidad activa mantiene miles de paquetes adicionales (NumPy, Django, Flask, etc.).</li> <li>Diferencias con otros lenguajes: A diferencia de Java o C++, Python no requiere declarar tipos de variable (es din\u00e1mico), lo que hace el c\u00f3digo m\u00e1s conciso. El tipado din\u00e1mico permite mayor flexibilidad, pero puede provocar errores en tiempo de ejecuci\u00f3n que en un lenguaje est\u00e1tico aparecer\u00edan en compilaci\u00f3n. Python usa indentaci\u00f3n obligatoria para delimitar bloques (en Java/C++ se usan <code>{}</code>), lo que mejora la legibilidad pero exige consistencia. Por ser interpretado, Python suele ser m\u00e1s lento en tiempo de ejecuci\u00f3n que lenguajes compilados como C++/Java, pero el desarrollo es mucho m\u00e1s r\u00e1pido y directo. En resumen, Python prioriza la legibilidad y velocidad de desarrollo, sacrificando un poco de rendimiento en comparaci\u00f3n con lenguajes compilados.</li> </ul>"},{"location":"tema2/#2-elementos-basicos-del-lenguaje","title":"2. Elementos b\u00e1sicos del lenguaje","text":""},{"location":"tema2/#variables-y-tipos-de-datos","title":"Variables y tipos de datos","text":"<p>En Python, las variables son etiquetas para objetos en memoria. No se declaran con tipo; basta con asignar un valor para crearlas. Por ejemplo:</p> <pre><code>numero = 42         # entero\ntemperatura = 36.6  # flotante\nnombre = \"Carlos\"   # cadena de texto (str)\nactivo = True       # booleano\n</code></pre> <ul> <li>Python soporta varios tipos b\u00e1sicos integrados: <code>int</code> (enteros), <code>float</code> (decimales), <code>bool</code> (bool\u00e9anos) y <code>str</code> (cadenas de texto), entre otros. Adem\u00e1s, son comunes los tipos compuestos: listas, tuplas, diccionarios y conjuntos (se ver\u00e1n en la secci\u00f3n de estructuras de datos). Al asignar <code>x = 5</code>, el tipo de <code>x</code> es <code>int</code>. Si luego hacemos <code>x = \"cinco\"</code>, ahora <code>x</code> es <code>str</code>. Esta flexibilidad se llama tipado din\u00e1mico.</li> <li>Python tambi\u00e9n implementa tipado fuerte: aunque no declaremos tipos, las operaciones verifican la compatibilidad. Por ejemplo, <code>5 + \"hola\"</code> dar\u00e1 un error <code>TypeError</code>.</li> <li>Para verificar el tipo de un objeto podemos usar la funci\u00f3n <code>type()</code>, y el operador <code>isinstance(obj, Tipo)</code>.</li> </ul>"},{"location":"tema2/#operadores","title":"Operadores","text":"<p>Python incluye todos los operadores b\u00e1sicos y m\u00e1s:</p> <ul> <li>Aritm\u00e9ticos: <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code> (divisi\u00f3n flotante), <code>//</code> (divisi\u00f3n entera), <code>%</code> (m\u00f3dulo), <code>**</code> (potencia). Ejemplos:</li> </ul> <pre><code>a = 7 + 3   # 10\nb = 7 / 2   # 3.5\nc = 7 // 2  # 3\nd = 2 ** 3  # 8\n</code></pre> <ul> <li>Comparaci\u00f3n: <code>==</code>, <code>!=</code>, <code>&gt;</code>, <code>&lt;</code>, <code>&gt;=</code>, <code>&lt;=</code>. Retornan booleanos (<code>True</code>/<code>False</code>):</li> </ul> <pre><code>print(5 == 5)  # True\nprint(5 &lt; 3)   # False\n</code></pre> <ul> <li> <p>L\u00f3gicos: <code>and</code>, <code>or</code>, <code>not</code> (en Python las palabras reservadas son las palabras en ingl\u00e9s). Por ejemplo: <code>if x &gt; 0 and x &lt; 10:</code>.</p> </li> <li> <p>Asignaci\u00f3n: <code>=</code>, y combinados como <code>+=</code>, <code>-=</code>, <code>*=</code>, etc. (p.ej. <code>x += 1</code> es equivalente a <code>x = x + 1</code>).</p> </li> <li> <p>Pertenencia: <code>in</code>, <code>not in</code>, para probar si un elemento est\u00e1 en una colecci\u00f3n:</p> </li> </ul> <pre><code>lista = [1, 2, 3]\nprint(2 in lista)    # True\n</code></pre> <ul> <li>Identidad: <code>is</code>, <code>is not</code> (verifica si dos nombres referencian el mismo objeto en memoria, no s\u00f3lo valores iguales).</li> </ul> <p>Python optimiza enteros peque\u00f1os (por ejemplo -5 a 256) para que referencien el mismo objeto, por eso <code>x = 100; y = 100; x is y</code> puede ser <code>True</code>. Sin embargo, en general para comparar valores iguales se usan <code>==</code>.</p>"},{"location":"tema2/#entradasalida-y-comentarios","title":"Entrada/Salida y comentarios","text":"<ul> <li>Salida: Se usa la funci\u00f3n incorporada <code>print()</code> para mostrar texto o datos en la consola. Por ejemplo: <code>print(\"Hola, mundo\")</code>. <code>print</code> puede imprimir m\u00faltiples valores separados por comas, o usar f-strings o el m\u00e9todo <code>.format()</code> para formatear salidas. De hecho, la documentaci\u00f3n oficial indica que hasta ahora se han utilizado la sentencia de expresi\u00f3n y la funci\u00f3n <code>print()</code> para generar salida.</li> <li>Entrada: La funci\u00f3n <code>input()</code> detiene el programa y espera que el usuario escriba algo por teclado, devolviendo lo que se escribi\u00f3 como cadena de texto. Por ejemplo:</li> </ul> <pre><code>nombre = input(\"\u00bfC\u00f3mo te llamas? \")\nprint(\"Hola,\", nombre)\n</code></pre> <p>Importante: <code>input()</code> siempre devuelve un <code>str</code>. Si el usuario escribe un n\u00famero y queremos usarlo como entero, hay que convertirlo con <code>int()</code>, sabiendo que un valor no num\u00e9rico causar\u00e1 una excepci\u00f3n <code>ValueError</code>.</p> <ul> <li>Comentarios: Para comentarios de una l\u00ednea se usa <code>#</code>. Python ignora todo lo que sigue a <code>#</code> en la misma l\u00ednea:</li> </ul> <pre><code># Esto es un comentario\nx = 5  # Comentario al final de una l\u00ednea de c\u00f3digo\n</code></pre> <p>Para comentarios multil\u00ednea se suelen usar cadenas de triple comillas (<code>\"\"\"Comentario\"\"\"</code> o <code>'''Comentario'''</code>). T\u00e9cnicamente \u00e9stas crean un string que no se asigna a nada, por lo que el int\u00e9rprete lo ignora (adem\u00e1s de servir como docstring cuando est\u00e1 al inicio de una funci\u00f3n o clase).</p>"},{"location":"tema2/#3-control-de-flujo","title":"3. Control de flujo","text":""},{"location":"tema2/#condicionales-ifelifelse","title":"Condicionales (<code>if/elif/else</code>)","text":"<p>Permiten ejecutar c\u00f3digo s\u00f3lo si se cumplen condiciones booleanas. Ejemplos pr\u00e1cticos:</p> <pre><code>edad = 20\nif edad &gt;= 18:\n    print(\"Eres mayor de edad.\")\nelse:\n    print(\"Eres menor de edad.\")\n</code></pre> <pre><code>num = int(input(\"Ingresa un n\u00famero: \"))\nif num % 2 == 0:\n    print(f\"{num} es par.\")\nelse:\n    print(f\"{num} es impar.\")\n</code></pre> <pre><code>nota = 85\nif nota &gt;= 90:\n    print(\"A\")\nelif nota &gt;= 80:\n    print(\"B\")\nelif nota &gt;= 70:\n    print(\"C\")\nelse:\n    print(\"D o inferior\")\n</code></pre> <p>Estos ejemplos muestran un <code>if</code>, <code>if/else</code>, y una cadena <code>if/elif/else</code>. Python eval\u00faa las condiciones de arriba abajo y ejecuta a lo sumo un bloque (el primero verdadero), luego sale del condicional. Dentro de cada bloque se pueden anidar m\u00e1s <code>if</code> o bucles.</p>"},{"location":"tema2/#bucles-for-while","title":"Bucles (<code>for</code>, <code>while</code>)","text":"<p>Permiten repetir un bloque de c\u00f3digo. En Python:</p> <ul> <li><code>for</code> recorre secuencias (como listas, cadenas, tuplas, rango, etc.). Ejemplos:</li> </ul> <pre><code># Iterar con range\nfor i in range(5):\n    print(i)\n# Salida: 0 1 2 3 4\n</code></pre> <pre><code>frutas = [\"manzana\", \"banana\", \"cereza\"]\nfor fruta in frutas:\n    print(fruta.upper())\n# Salida: MANZANA BANANA CEREZA\n</code></pre> <pre><code># Sumar elementos de una lista\nnums = [1, 3, 5, 7]\ntotal = 0\nfor n in nums:\n    total += n\nprint(\"Suma =\", total)  # Suma = 16\n</code></pre> <ul> <li><code>while</code> repite mientras una condici\u00f3n sea verdadera. Ejemplos:</li> </ul> <pre><code>cuenta = 0\nwhile cuenta &lt; 3:\n    print(\"Cuenta:\", cuenta)\n    cuenta += 1\n# Imprime 0, 1, 2\n</code></pre> <pre><code># Bucle infinito con break\nwhile True:\n    texto = input(\"Escribe 'salir' para terminar: \")\n    if texto.lower() == \"salir\":\n        print(\"Terminando bucle.\")\n        break\n    print(\"Dijiste:\", texto)\n</code></pre> <pre><code># Uso de continue para saltar iteraciones\nfor i in range(5):\n    if i % 2 == 0:\n        continue  # salta los pares\n    print(i)\n# Imprime 1, 3\n</code></pre> <p>En bucles es com\u00fan usar <code>break</code> para salir antes de tiempo y <code>continue</code> para saltar a la siguiente iteraci\u00f3n. El bucle <code>for</code> recorre un iterable hasta agotarlo; el <code>while</code> debe cuidar su condici\u00f3n o puede quedar infinito.</p>"},{"location":"tema2/#4-funciones","title":"4. Funciones","text":"<p>Definir funciones permite reutilizar c\u00f3digo. Se usa la palabra clave <code>def</code>. Ejemplo:</p> <pre><code>def saludar(nombre):\n    \"\"\"Retorna un saludo personalizado.\"\"\"\n    mensaje = f\"Hola, {nombre}!\"\n    return mensaje\n\nprint(saludar(\"Ana\"))  # Hola, Ana!\n</code></pre> <ul> <li>Argumentos: Podemos pasar par\u00e1metros posicionales o nombrados. Ejemplo:</li> </ul> <pre><code>def potencia(base, exponente=2):\n    return base ** exponente\n\nprint(potencia(5))     # 25, usa exponente por defecto 2\nprint(potencia(5, 3))  # 125\n</code></pre> <ul> <li> <p>Valor de retorno: La sentencia <code>return</code> devuelve un valor. Si no se usa <code>return</code>, la funci\u00f3n retorna <code>None</code>.</p> </li> <li> <p>Funciones lambda: Son funciones an\u00f3nimas de una sola expresi\u00f3n, \u00fatiles en llamadas cortas. Ejemplo:</p> </li> </ul> <pre><code>cuadrado = lambda x: x * x\nprint(cuadrado(4))  # 16\n\n# Uso en combinaci\u00f3n con sorted\npuntos = [(1,2), (3,1), (5,0)]\npuntos_ordenados = sorted(puntos, key=lambda par: par[1])\n# Ordena por la segunda componente: [(5,0), (3,1), (1,2)]\n</code></pre> <ul> <li>Argumentos variables: A veces no sabemos cu\u00e1ntos argumentos se pasar\u00e1n. Usamos <code>*args</code> para tuplas de argumentos posicionales y <code>**kwargs</code> para diccionarios de argumentos nombrados. Ejemplo:</li> </ul> <pre><code>def mostrar_info(*args, **kwargs):\n    print(\"Posicionales:\", args)\n    print(\"Nombrados:\", kwargs)\n\nmostrar_info(1, 2, a=\"hola\", b=\"mundo\")\n# Posicionales: (1, 2)\n# Nombrados: {'a': 'hola', 'b': 'mundo'}\n</code></pre> <p>Cada funci\u00f3n puede incluir una cadena triple (<code>\"\"\"docstring\"\"\"</code>) justo debajo de la definici\u00f3n, describiendo su prop\u00f3sito (buenas pr\u00e1cticas de documentaci\u00f3n). Por ejemplo, <code>\"\"\"Retorna un saludo personalizado.\"\"\"</code> en el ejemplo de <code>saludar</code> sirve como docstring de la funci\u00f3n.</p>"},{"location":"tema2/#5-estructuras-de-datos","title":"5. Estructuras de datos","text":"<p>Python provee varias estructuras de datos integradas:</p> <ul> <li>Listas (<code>list</code>): Son arreglos ordenados y mutables. Por ejemplo:</li> </ul> <pre><code>lista = [10, 20, 30]\nlista.append(40)          # [10, 20, 30, 40]\nprint(lista[1])           # 20\nlista[0] = 15             # [15, 20, 30, 40]\nprint(len(lista))         # 4\nfor elem in lista:\n    print(elem)           # itera e imprime cada elemento\n</code></pre> <p>Se pueden usar slicing: <code>lista[1:3]</code> devuelve sublista <code>[20, 30]</code>. Las listas permiten duplicados y se pueden ordenar (<code>lista.sort()</code>), invertir (<code>lista.reverse()</code>), etc.</p> <ul> <li>Tuplas (<code>tuple</code>): Son secuencias ordenadas e inmutables. Se crean con par\u00e9ntesis <code>(1, 2, 3)</code> o usando la coma <code>x = 1, 2</code>. Ejemplos:</li> </ul> <pre><code>tupla = (100, 200, 300)\nprint(tupla[2])       # 300\nx, y, z = tupla       # desempaquetado de tupla\nprint(x, y, z)        # 100 200 300\n</code></pre> <p>Como no se pueden modificar tras crearla, las tuplas se usan para datos \u201cfijos\u201d o como claves de diccionario (al ser hashables). Por ejemplo, <code>min,max = mi_funcion()</code> puede devolver varios valores empaquetados en una tupla.</p> <ul> <li>Diccionarios (<code>dict</code>): Almacenan pares clave:valor sin orden fijo (en Python 3.7+ mantienen orden de inserci\u00f3n). Ejemplo:</li> </ul> <pre><code>persona = {\"nombre\": \"Luis\", \"edad\": 30}\nprint(persona[\"nombre\"])    # Luis\npersona[\"edad\"] = 31        # modifica el valor asociado a 'edad'\npersona[\"ciudad\"] = \"Madrid\"  # agrega nueva clave\nif \"edad\" in persona:\n    print(\"Edad:\", persona.get(\"edad\"))\n# Iterar por claves y valores:\nfor clave, valor in persona.items():\n    print(clave, \"=\", valor)\ndel persona[\"ciudad\"]       # elimina la clave 'ciudad'\n</code></pre> <p>Los diccionarios son muy \u00fatiles para representar objetos o estructuras de datos complejas. M\u00e9todos comunes: <code>.keys()</code>, <code>.values()</code>, <code>.items()</code>.</p> <ul> <li>Conjuntos (<code>set</code>): Colecci\u00f3n de elementos \u00fanicos desordenada. Se crean con <code>{1,2,3}</code> o <code>set([1,2,2,3])</code>. Ejemplos:</li> </ul> <pre><code>s = {1, 2, 2, 3}\nprint(s)        # {1, 2, 3} (duplica elim.)\ns.add(4)        # {1,2,3,4}\ns.remove(2)     # {1,3,4}\nprint(2 in s)   # False\ns2 = {3, 4, 5}\nprint(s | s2)   # {1,3,4,5} (uni\u00f3n)\nprint(s &amp; s2)   # {3,4} (intersecci\u00f3n)\n</code></pre> <p>Los conjuntos son \u00fatiles para operaciones matem\u00e1ticas r\u00e1pidas (uni\u00f3n, intersecci\u00f3n, diferencia) y para eliminar duplicados en una secuencia.</p> <p>En resumen, cada estructura de datos se elige seg\u00fan la necesidad: listas/tuplas para colecciones ordenadas, diccionarios para mapeos clave-valor, conjuntos para colecciones \u00fanicas sin orden. Estas estructuras tienen m\u00e9todos propios (p.ej. <code>.append()</code>, <code>.pop()</code>, <code>.union()</code>, etc.) y se cubren en la documentaci\u00f3n oficial de tipos incorporados.</p>"},{"location":"tema2/#6-manejo-de-excepciones","title":"6. Manejo de excepciones","text":"<p>En Python, los errores en tiempo de ejecuci\u00f3n disparan excepciones. Para evitar que el programa termine abruptamente, se usan bloques <code>try/except</code>:</p> <pre><code>try:\n    x = int(input(\"N\u00famero: \"))\n    resultado = 10 / x\n    print(\"Resultado =\", resultado)\nexcept ValueError:\n    print(\"Error: debes ingresar un n\u00famero v\u00e1lido.\")\nexcept ZeroDivisionError:\n    print(\"Error: divisi\u00f3n por cero.\")\nelse:\n    print(\"Todo fue bien.\")\nfinally:\n    print(\"Bloque finally: se ejecuta siempre, ocurra error o no.\")\n</code></pre> <ul> <li><code>try</code>: Se coloca el c\u00f3digo que puede fallar.</li> <li><code>except</code>: Captura excepciones espec\u00edficas y maneja el error. Se puede usar m\u00faltiples <code>except</code> para distintos tipos (por ejemplo <code>ValueError</code>, <code>KeyError</code>, etc.).</li> <li><code>else</code>: (opcional) c\u00f3digo a ejecutar si no ocurri\u00f3 ninguna excepci\u00f3n en el <code>try</code>.</li> <li><code>finally</code>: (opcional) c\u00f3digo que se ejecuta siempre, incluso si hubo excepci\u00f3n; \u00fatil para limpiar recursos abiertos.</li> </ul> <p>Para lanzar excepciones nosotros mismos se usa <code>raise</code>. Por ejemplo, la sentencia <code>raise NameError(\"\u00a1Alto ah\u00ed!\")</code> forzar\u00eda un error de tipo <code>NameError</code>. Esto sirve para se\u00f1alar condiciones an\u00f3malas. Se pueden definir excepciones personalizadas creando una clase que herede de <code>Exception</code>:</p> <pre><code>class MiError(Exception):\n    pass\n\ndef chequear_edad(edad):\n    if edad &lt; 18:\n        raise MiError(\"Edad m\u00ednima 18 a\u00f1os requerida.\")\n\ntry:\n    chequear_edad(16)\nexcept MiError as e:\n    print(\"Excepci\u00f3n personalizada:\", e)\n</code></pre> <p>En este ejemplo, al llamar <code>chequear_edad(16)</code> se levanta <code>MiError</code>, que luego se captura en el bloque <code>except</code>. Esta es la forma recomendada de crear jerarqu\u00edas propias de excepciones. En la pr\u00e1ctica se heredar\u00eda de <code>Exception</code> (u otro tipo m\u00e1s espec\u00edfico) y se puede a\u00f1adir informaci\u00f3n adicional en el constructor o atributos.</p>"},{"location":"tema2/#7-programacion-orientada-a-objetos-poo","title":"7. Programaci\u00f3n orientada a objetos (POO)","text":"<p>Python soporta POO con clases y objetos. Para definir una clase se usa la palabra clave <code>class</code>. Ejemplo b\u00e1sico:</p> <pre><code>class Persona:\n    \"\"\"Clase que representa una persona.\"\"\"\n    def __init__(self, nombre, edad):\n        self.nombre = nombre  # atributo de instancia\n        self.edad = edad\n\n    def saludar(self):\n        \"\"\"M\u00e9todo que devuelve un saludo.\"\"\"\n        return f\"Hola, soy {self.nombre} y tengo {self.edad} a\u00f1os.\"\n\n    def __str__(self):\n        \"\"\"Representaci\u00f3n en texto (p.ej. para print).\"\"\"\n        return f\"{self.nombre}, {self.edad} a\u00f1os\"\n\n# Crear instancia:\np = Persona(\"Ana\", 30)\nprint(p.saludar())     # Hola, soy Ana y tengo 30 a\u00f1os.\nprint(p)               # Usa __str__: Ana, 30 a\u00f1os\n</code></pre> <ul> <li><code>__init__(self, ...)</code> es el constructor; se ejecuta al crear un objeto. Los par\u00e1metros despu\u00e9s de <code>self</code> son los argumentos para inicializar.</li> <li><code>self</code> representa la instancia actual. Los atributos se definen como <code>self.atributo = valor</code>.</li> <li><code>__str__(self)</code> es un m\u00e9todo especial para definir c\u00f3mo se convierte el objeto a cadena (por ejemplo, al usar <code>print(obj)</code>). Al llamarse <code>print(p)</code>, Python utiliza <code>p.__str__()</code>. Si no se define <code>__str__</code>, se mostrar\u00e1 algo como <code>&lt;__main__.Persona object at 0x...&gt;</code>.</li> <li>Herencia: Una clase puede heredar de otra. Ejemplo:</li> </ul> <pre><code>class Empleado(Persona):\n    def __init__(self, nombre, edad, salario):\n        super().__init__(nombre, edad)  # llama al __init__ de Persona\n        self.salario = salario\n\n    def __str__(self):\n        return f\"{self.nombre}, salario: {self.salario}\u20ac\"\n\ne = Empleado(\"Luis\", 28, 2500)\nprint(e)  # Luis, salario: 2500\u20ac\n</code></pre> <p>Aqu\u00ed <code>Empleado</code> hereda de <code>Persona</code>. Se usa <code>super()</code> para invocar el constructor de la clase base y as\u00ed inicializar sus atributos. En POO, esto facilita reutilizar c\u00f3digo de la clase padre mientras se a\u00f1aden nuevos atributos o m\u00e9todos en la subclase. * Encapsulamiento: Por convenci\u00f3n, los atributos \u201cprotegidos\u201d se nombran con un gui\u00f3n bajo inicial (<code>_valor</code>) y los privados con dos guiones bajos (<code>__secreto</code>). Python no impide el acceso, pero convierte los nombres con dos guiones iniciando un proceso de name mangling. Por ejemplo:</p> <pre><code>class Contador:\n    def __init__(self):\n        self._valor = 0\n        self.__secreto = 42\n    def incrementar(self):\n        self._valor += 1\n\nc = Contador()\n# c._valor es accesible (pero indicando convenci\u00f3n de interno).\n# c.__secreto dar\u00eda error, internamente se guarda como _Contador__secreto.\n</code></pre> <p>En general, se sigue la convenci\u00f3n de PEP 8 para nombres (ver secci\u00f3n de Buenas pr\u00e1cticas). La documentaci\u00f3n oficial de POO en Python expone estos conceptos en detalle.</p>"},{"location":"tema2/#8-modulos-y-paquetes","title":"8. M\u00f3dulos y paquetes","text":"<ul> <li>M\u00f3dulos: Son archivos <code>.py</code> que agrupan c\u00f3digo (funciones, clases, variables). Por ejemplo, podemos crear un archivo <code>aritmetica.py</code> con funciones matem\u00e1ticas:</li> </ul> <pre><code># aritmetica.py\ndef sumar(a, b):\n    return a + b\ndef restar(a, b):\n    return a - b\n</code></pre> <p>Luego, en otro archivo del mismo directorio podemos importar y usar esas funciones:</p> <pre><code>import aritmetica\nprint(aritmetica.sumar(7, 5))  # 12\n</code></pre> <p>Como explica RecursosPython, \u201cun m\u00f3dulo es un archivo de Python cuyos objetos (funciones, clases, excepciones, etc.) pueden ser accedidos desde otro archivo\u201d. Tambi\u00e9n es posible importar elementos espec\u00edficos: <code>from aritmetica import sumar</code> permite usar directamente <code>sumar(7,5)</code>.</p> <ul> <li>Paquetes: Son carpetas que contienen m\u00f3dulos (y un archivo especial <code>__init__.py</code>). Por ejemplo, podr\u00edamos crear:</li> </ul> <pre><code>matematica/\n    __init__.py\n    aritmetica.py\n    geometria.py\n</code></pre> <p>Aqu\u00ed <code>matematica</code> es un paquete. Para usarlo:</p> <pre><code>import matematica.aritmetica\nprint(matematica.aritmetica.sumar(7, 5))  # 12\n</code></pre> <p>O bien:</p> <pre><code>from matematica.aritmetica import sumar\nprint(sumar(7, 5))\n</code></pre> <p>El tutorial de Recursospython define as\u00ed un paquete: \u201cUna carpeta que contiene varios m\u00f3dulos. ... Debe contener siempre un archivo <code>__init__.py</code> (por el momento vac\u00edo) para que Python entienda que se trata de un paquete y no de una simple carpeta.\u201d. Los paquetes permiten organizar el c\u00f3digo en grandes proyectos.</p> <ul> <li> <p>Biblioteca est\u00e1ndar: Python incluye muchos m\u00f3dulos/packs oficiales para distintas tareas. Ejemplos populares:</p> </li> <li> <p><code>math</code> (funciones matem\u00e1ticas avanzadas, constantes como <code>pi</code>),</p> </li> <li><code>random</code> (n\u00fameros aleatorios),</li> <li><code>datetime</code> (fechas y horas),</li> <li><code>os</code> (operaciones de sistema de archivos, entorno),</li> <li><code>sys</code> (variables del int\u00e9rprete, argumentos de l\u00ednea de comandos, ruta de m\u00f3dulos, etc.).</li> </ul> <p>Ejemplo de uso:</p> <pre><code>import math, random, datetime, os, sys\n\nprint(math.sqrt(16))                  # 4.0\nprint(random.randint(1, 10))         # n\u00famero aleatorio 1-10\nprint(datetime.datetime.now())       # fecha y hora actuales\nprint(os.getcwd())                   # directorio de trabajo actual\nprint(sys.version)                   # versi\u00f3n de Python\n</code></pre> <p>Estos m\u00f3dulos se importan con <code>import nombre_modulo</code>. Muchos otros (como <code>json</code>, <code>re</code>, <code>sys</code>, <code>os</code>, etc.) est\u00e1n documentados en la referencia de la biblioteca est\u00e1ndar de Python.</p>"},{"location":"tema2/#9-buenas-practicas","title":"9. Buenas pr\u00e1cticas","text":"<p>Para escribir c\u00f3digo Python claro y mantenible, se siguen convenciones y estilos:</p> <ul> <li> <p>PEP 8 (estilo de c\u00f3digo): Es la gu\u00eda oficial de estilo de Python. Recomienda, por ejemplo, usar indentaci\u00f3n de 4 espacios, l\u00edneas de longitud m\u00e1xima \\~79 caracteres, y mantener consistencia. Algunos puntos clave:</p> </li> <li> <p>Nombres de funciones y variables: en min\u00fasculas con palabras separadas por guiones bajos (<code>snake_case</code>), p.ej. <code>mi_funcion()</code>.</p> </li> <li>Nombres de clases: con la Convenci\u00f3n CapWords (iniciando cada palabra con may\u00fascula), p.ej. <code>MiClase</code>.</li> <li>Nombres constantes: en may\u00fasculas con guiones bajos (<code>UPPER_CASE</code>), por ejemplo <code>MAX_LIMITE</code>.</li> <li>Espacios: una l\u00ednea en blanco para separar funciones/clases grandes, espacios alrededor de operadores, etc.</li> <li>Docstrings: Cada m\u00f3dulo, funci\u00f3n y clase p\u00fablica debe llevar documentaci\u00f3n interna (docstring) al inicio, encerrada en triple comillas (<code>\"\"\"Descripci\u00f3n\"\"\"</code>). Por ejemplo:</li> </ul> <pre><code>def calcular_area(base, altura):\n    \"\"\"\n    Calcula el \u00e1rea de un tri\u00e1ngulo dado su base y altura.\n    Argumentos:\n        base (float): longitud de la base.\n        altura (float): altura del tri\u00e1ngulo.\n    Retorna:\n        float: \u00e1rea calculada.\n    \"\"\"\n    return (base * altura) / 2\n</code></pre> <p>Estas cadenas son accesibles en tiempo de ejecuci\u00f3n v\u00eda el atributo <code>.__doc__</code> del objeto y herramientas de documentaci\u00f3n pueden extraerlas (PEP 257 define las convenciones de docstring).</p> <ul> <li> <p>Convenciones de nombres: Se mencion\u00f3 PEP 8 (ver arriba). Adem\u00e1s, se usa <code>_variable</code> como convenci\u00f3n de \u201cprivado\u201d y <code>__var</code> para nombre-mangling. Los nombres de m\u00f3dulos deben ser cortos y min\u00fasculos (<code>mimodulo.py</code>).</p> </li> <li> <p>Estructura de proyectos: En proyectos m\u00e1s grandes se suelen organizar carpetas, por ejemplo:</p> </li> </ul> <pre><code>mi_proyecto/\n    README.md\n    setup.py  (o pyproject.toml)\n    src/      \n        moduloprincipal.py\n        paquete/\n            __init__.py\n            submodulo.py\n    tests/\n        test_moduloprincipal.py\n</code></pre> <p>Es com\u00fan usar un entorno virtual (<code>venv</code>) para aislar dependencias (ver siguiente secci\u00f3n). Documentar con un README e incluir un archivo de requerimientos (<code>requirements.txt</code>) o utilizar herramientas como Poetry tambi\u00e9n se considera buena pr\u00e1ctica.</p>"},{"location":"tema2/#10-depuracion-y-pruebas","title":"10. Depuraci\u00f3n y pruebas","text":"<ul> <li><code>assert</code>: Se usa para comprobar condiciones que deben ser verdad. Si la condici\u00f3n es falsa, lanza un <code>AssertionError</code>. Por ejemplo:</li> </ul> <pre><code>x = -5\nassert x &gt;= 0, \"x debe ser no negativo\"\n</code></pre> <p>Si <code>x</code> fuera negativo, el programa se detendr\u00eda mostrando <code>\"AssertionError: x debe ser no negativo\"</code>. Es \u00fatil en desarrollo para verificar invariantes. En modo optimizado (<code>python -O</code>), las aserciones se ignoran.</p> <ul> <li>Pruebas unitarias: Python incluye el m\u00f3dulo <code>unittest</code> para automatizar pruebas. Se definen clases que heredan de <code>unittest.TestCase</code> y m\u00e9todos que empiezan con <code>test_</code>. Dentro, se usan m\u00e9todos como <code>self.assertEqual()</code>, <code>self.assertTrue()</code>, etc., para verificar comportamientos esperados. Ejemplo b\u00e1sico (tomado de la documentaci\u00f3n oficial):</li> </ul> <pre><code>import unittest\n\nclass TestOperaciones(unittest.TestCase):\n    def test_suma(self):\n        self.assertEqual(1 + 1, 2)\n\n    def test_upper(self):\n        self.assertTrue(\"hola\".upper() == \"HOLA\")\n\nif __name__ == '__main__':\n    unittest.main()\n</code></pre> <p>En este caso, <code>unittest</code> ejecutar\u00e1 cada m\u00e9todo <code>test_*</code>, reportando qu\u00e9 pas\u00f3. Como indica la documentaci\u00f3n: \u201cPara crear un caso de prueba se genera una subclase de <code>unittest.TestCase</code>. Las pruebas se definen con m\u00e9todos cuyos nombres comienzan por <code>test</code>. El coraz\u00f3n de cada prueba son llamadas a <code>assertEqual()</code>, <code>assertTrue()</code>, etc., en lugar de la sentencia <code>assert</code>, para que el ejecutor pueda recopilar los resultados\u201d.</p> <ul> <li>Depuraci\u00f3n b\u00e1sica: Para encontrar errores comunes se puede usar herramientas como el debugger integrado (<code>pdb</code>), o imprimir valores intermedios. Adem\u00e1s, al leer trazas de error (<code>Traceback</code>) se identifica el tipo de excepci\u00f3n y la l\u00ednea donde ocurri\u00f3. Errores frecuentes incluyen: <code>SyntaxError</code> (error en la sintaxis), <code>NameError</code> (uso de variable no definida), <code>TypeError</code>, <code>IndexError</code>, <code>KeyError</code>, etc. Manejar estos con <code>try/except</code> ayuda a crear programas robustos.</li> </ul>"},{"location":"tema2/#11-herramientas-y-entornos","title":"11. Herramientas y entornos","text":"<p>Para desarrollar en Python existen varias herramientas:</p> <ul> <li>Editores/IDEs: Recomendados PyCharm (de JetBrains, con versi\u00f3n Community gratuita) o VS Code (editor ligero con extensi\u00f3n de Python). Tambi\u00e9n Spyder, Sublime Text o editores de texto simples funcionan. Estas herramientas ofrecen resaltado de sintaxis, autocompletado, depuraci\u00f3n integrada y dem\u00e1s ayudas.</li> <li>Notebooks: Jupyter Notebook y JupyterLab permiten escribir c\u00f3digo Python en un entorno interactivo, mezclando texto, ecuaciones y gr\u00e1ficos. Son muy usados en ciencia de datos y ense\u00f1anza.</li> <li>Entornos virtuales: Es crucial aislar los proyectos. Python trae el m\u00f3dulo <code>venv</code> para crear entornos virtuales ligeros: cada entorno tiene su propio int\u00e9rprete y librer\u00edas independientes. Por ejemplo:</li> </ul> <pre><code>python3 -m venv venv       # crea el entorno en la carpeta 'venv'\nsource venv/bin/activate   # (Unix) lo activa\nvenv\\Scripts\\activate      # (Windows)\n</code></pre> <p>Una vez activado, instalar paquetes con <code>pip install paquete</code> los deja s\u00f3lo en ese entorno. El documento oficial explica que \u201cun entorno virtual contiene un int\u00e9rprete de Python espec\u00edfico y librer\u00edas necesarias para soportar un proyecto... aislados de otros entornos y del sistema\u201d.</p> <ul> <li>Gesti\u00f3n de paquetes: Python usa <code>pip</code> para instalar paquetes desde el repositorio PyPI. Se suele usar un archivo <code>requirements.txt</code> o herramientas de empaquetado (<code>setuptools</code>, <code>poetry</code>) para especificar dependencias.</li> <li>Otras herramientas: Linters como <code>flake8</code>, formateadores como <code>black</code>, y herramientas de documentaci\u00f3n (<code>Sphinx</code>) son comunes en equipos profesionales. Sistemas de control de versiones (Git) son est\u00e1ndar en desarrollo de software.</li> </ul> <p>En resumen, un buen entorno de trabajo Python incluye un editor o IDE de confianza, un entorno virtual para cada proyecto, y uso de la l\u00ednea de comandos para instalar/ejecutar. Aprender a usar la l\u00ednea <code>python</code>, manejar paquetes con <code>pip</code> y usar depuradores har\u00e1 la programaci\u00f3n en Python m\u00e1s eficaz.</p> <p>Referencias: Para profundizar, la documentaci\u00f3n oficial de Python, tutoriales educativos y recursos como Real Python, DataCamp, o libros especializados son excelentes gu\u00edas. Varios extractos de documentaci\u00f3n se han citado arriba. Estos recursos cubren cada tema con m\u00e1s detalle y ejemplos adicionales.</p>"},{"location":"tema4/","title":"4. Modelos Pre-entrenados en IA y cloud-computing","text":"<p>Los modelos pre-entrenados son redes neuronales entrenadas con grandes vol\u00famenes de datos gen\u00e9ricos (texto, im\u00e1genes, audio, etc.) antes de ser aplicados a tareas espec\u00edficas. Estos modelos han capturado representaciones de conocimiento \u00fatil (patrones, relaciones sem\u00e1nticas, caracter\u00edsticas visuales) que pueden reutilizarse. En lugar de entrenar un modelo desde cero, se parte de uno ya entrenado y se ajusta a la tarea concreta (aprendizaje por transferencia). Entre sus ventajas destacan:</p> <ul> <li>Ahorro de tiempo y recursos: se evita el costoso entrenamiento inicial con grandes datos.</li> <li>Mejora de precisi\u00f3n: al aprovechar conocimiento previo de datos extensos y diversos, suelen obtener mejores resultados que entrenamientos desde cero.</li> <li>Versatilidad: permiten adaptar un \u00fanico modelo base a m\u00faltiples aplicaciones mediante t\u00e9cnicas como afinamiento (fine-tuning).</li> <li>Accesibilidad: democratizan la IA, ya que con pocos datos o recursos limitados se pueden lograr modelos competitivos.</li> </ul> <p>En la siguiente figura se ilustra c\u00f3mo el aprendizaje profundo (deep learning, DL) es un subconjunto del machine learning, que a su vez es parte de la inteligencia artificial; los modelos pre-entrenados suelen ser de DL (p.\u202fej. redes neuronales profundas):  .</p>"},{"location":"tema4/#tipos-de-modelos-pre-entrenados","title":"Tipos de Modelos Pre-entrenados","text":"<p>En funci\u00f3n de los datos y tareas, existen diversas categor\u00edas de modelos pre-entrenados:</p> <ul> <li> <p>Modelos de Lenguaje (LLMs): Redes de gran tama\u00f1o entrenadas con corpus textuales masivos. Ejemplos notables son GPT (OpenAI), BERT y T5 (Google). Estos modelos aprenden a predecir palabras o convertir texto en vectores de caracter\u00edsticas durante el pre-entrenamiento; luego se ajustan (fine-tuning) con datos espec\u00edficos para tareas (clasificaci\u00f3n, traducci\u00f3n, pregunta-respuesta). La fase de preentrenamiento suele implicar tareas como enmascarar palabras o predicci\u00f3n de token siguiente, mientras que el ajuste fino adapta el modelo a una nueva tarea particular.</p> </li> <li> <p>Visi\u00f3n por Computador: Modelos entrenados con im\u00e1genes. Por ejemplo, YOLO (You Only Look Once) para detecci\u00f3n de objetos, EfficientNet para clasificaci\u00f3n de im\u00e1genes y ResNet, MobileNet, etc. Recientemente, modelos como CLIP (de OpenAI) aprenden conceptos visuales a partir de descripciones en texto; CLIP puede aplicarse a tareas de clasificaci\u00f3n visual dando los nombres de las categor\u00edas que se desean reconocer, logrando capacidades de zero-shot similares a GPT-3.</p> </li> <li> <p>Audio y Voz: Modelos de reconocimiento y procesamiento de audio. Por ejemplo, Whisper (OpenAI) es un modelo de transcripci\u00f3n de voz a texto entrenado con grandes cantidades de audio multiling\u00fce. Otro ejemplo es Wav2Vec (de Meta), modelo auto-supervisado de reconocimiento de voz. Estos modelos capturan caracter\u00edsticas de se\u00f1ales sonoras que luego pueden afinarse para tareas espec\u00edficas (reconocimiento de emociones, transcripci\u00f3n, detecci\u00f3n de palabras clave).</p> </li> <li> <p>Multimodales: Modelos que procesan simult\u00e1neamente diferentes modalidades (texto, imagen, audio, video). Adem\u00e1s de CLIP, destacan DALL\u00b7E (OpenAI) para generaci\u00f3n de im\u00e1genes a partir de texto, FLAVA (Facebook) o VirTex (NVIDIA) para visi\u00f3n-texto, y las versiones multimodales de GPT-4 (texto e im\u00e1genes). Estos modelos combinan los conocimientos de lenguaje natural y visi\u00f3n/otros datos, permitiendo tareas como b\u00fasqueda de im\u00e1genes por texto, descripci\u00f3n autom\u00e1tica de im\u00e1genes o generaci\u00f3n creativa de contenido.</p> </li> </ul>"},{"location":"tema4/#repositorios-de-modelos-pre-entrenados","title":"Repositorios de Modelos Pre-entrenados","text":"<p>Existen plataformas y bibliotecas donde se pueden descargar miles de modelos pre-entrenados:</p> <ul> <li> <p>Hugging Face (Model Hub): Biblioteca l\u00edder en NLP y ML. Ofrece una amplia colecci\u00f3n de modelos (BERT, GPT, T5, Whisper, Stable Diffusion, etc.) en formato f\u00e1cil de usar. El Model Hub de Hugging Face es un repositorio p\u00fablico con modelos entrenados (p.\u202fej. BLOOM, BERT multiling\u00fce). Se descargan localmente con la librer\u00eda <code>transformers</code> (ej. <code>from transformers import AutoModel; AutoModel.from_pretrained(\"bert-base-cased\")</code>).</p> </li> <li> <p>TensorFlow Hub: Biblioteca de Google con m\u00f3dulos y modelos listos para reutilizar. Permite usar con pocas l\u00edneas modelos populares (BERT, FastText, Faster R-CNN, etc.). Por ejemplo:</p> </li> </ul> <pre><code>import tensorflow_hub as hub\nmodel = hub.KerasLayer(\"https://tfhub.dev/google/nnlm-en-dim128/2\")\nembeddings = model([\"The rain in Spain.\"])\n</code></pre> <p>Como se describe en la documentaci\u00f3n de TensorFlow Hub, basta con instalar <code>tensorflow_hub</code> y cargar el m\u00f3dulo deseado (texto, im\u00e1genes, audio). Adem\u00e1s, Google ofrece un TensorFlow Model Zoo especializado en visi\u00f3n, con modelos para detecci\u00f3n, segmentaci\u00f3n, etc..</p> <ul> <li> <p>PyTorch Hub (Torchvision): PyTorch dispone de modelos pre-entrenados para visi\u00f3n en su paquete <code>torchvision</code>. Por ejemplo, instanciando <code>torchvision.models.resnet50(pretrained=True)</code> descarga pesos en ImageNet autom\u00e1ticamente. Tambi\u00e9n existe <code>torch.hub.load()</code> para obtener modelos de repositorios p\u00fablicos.</p> </li> <li> <p>Otros repositorios y \u201cModel Zoos\u201d: Existen repositorios como ONNX Model Zoo, Model Zoo de MXNet, TensorFlow Model Garden, y sitios como Papers with Code. En general, los hubs de modelos (p. ej. Hugging Face, TensorFlow Hub, PyTorch Hub) y los model zoos reducen dr\u00e1sticamente el esfuerzo de desarrollo al ofrecer un inicio r\u00e1pido con modelos sofisticados.</p> </li> </ul>"},{"location":"tema4/#descarga-instalacion-y-adaptacion-de-modelos","title":"Descarga, Instalaci\u00f3n y Adaptaci\u00f3n de Modelos","text":"<p>Para usar un modelo pre-entrenado, t\u00edpicamente se instala la biblioteca correspondiente (por ejemplo, <code>pip install transformers</code> o <code>pip install tensorflow_hub</code>). Luego se carga el modelo deseado y sus pesos. Por ejemplo, con Hugging Face:</p> <pre><code>from transformers import pipeline\nclf = pipeline(\"sentiment-analysis\")  # carga un modelo pre-entrenado de an\u00e1lisis de sentimiento\nprint(clf(\"La IA mejora nuestras vidas.\"))\n</code></pre> <p>Para TensorFlow Hub se instalan m\u00f3dulos con <code>hub.KerasLayer</code>. En PyTorch se emplea <code>torch.hub.load</code> o <code>torchvision.models</code> para descargar y usar pesos pre-entrenados.</p> <p>Una vez descargado, el modelo puede ajustarse o modificarse:</p> <ul> <li>Ajuste fino (fine-tuning): Se reentrena parcialmente el modelo con datos de la tarea espec\u00edfica, manteniendo gran parte de los pesos originales. El modelo se \u201cafina\u201d modificando sus par\u00e1metros para adaptarse mejor al dominio objetivo.</li> <li>Ingenier\u00eda de prompts (prompt engineering): En el caso de LLMs, se dise\u00f1an y refinan las instrucciones o preguntas (prompts) que se le dan al modelo para obtener respuestas concretas. Una buena formulaci\u00f3n de prompt puede guiar al modelo de lenguaje hacia el resultado deseado sin necesidad de entrenamiento adicional.</li> <li>Aprendizaje por transferencia (Transfer Learning): El modelo pre-entrenado act\u00faa como base de conocimiento. Al reutilizarlo se aprovecha el \u201caprendizaje\u201d de datos anteriores, reduciendo tiempo y recursos. Por ejemplo, se puede congelar la mayor\u00eda de capas (bloquear sus pesos) y solo entrenar nuevas capas finales con datos locales. Esto permite obtener buenos resultados a\u00fan con conjuntos de datos peque\u00f1os.</li> <li>Destilaci\u00f3n de conocimiento (Knowledge Distillation): T\u00e9cnica para crear un modelo m\u00e1s compacto. Un modelo grande (\u201cprofesor\u201d) gu\u00eda a uno m\u00e1s peque\u00f1o (\u201cestudiante\u201d) imitando sus salidas. La destilaci\u00f3n entrena al estudiante con las predicciones del profesor, logrando que el modelo ligero aprenda el mismo comportamiento. Esto es \u00fatil para desplegar modelos eficientemente en dispositivos limitados.</li> </ul>"},{"location":"tema4/#servicios-de-ia-en-la-nube","title":"Servicios de IA en la Nube","text":"<p>Las principales plataformas cloud ofrecen servicios gestionados de IA basados en modelos pre-entrenados y AutoML. A continuaci\u00f3n se describen los m\u00e1s relevantes:</p> <ul> <li> <p>Google Cloud Platform:</p> </li> <li> <p>Vertex AI: Plataforma unificada de ML que simplifica todo el ciclo de vida (datos, entrenamiento, despliegue). Permite desarrollar y escalar modelos de IA empresariales. Incluye herramientas para preparar datos, entrenar modelos personalizados (TensorFlow, PyTorch, AutoML) e implementar inferencias.</p> </li> <li>AutoML: Con AutoML de Google se pueden entrenar modelos personalizados de alta calidad con poca experiencia en ML. Ofrece soluciones \u201csin c\u00f3digo\u201d para visi\u00f3n, video, texto, traducci\u00f3n, etc.</li> <li>Vision AI: Servicio de visi\u00f3n cognitiva con API que automatiza tareas de an\u00e1lisis de im\u00e1genes y v\u00eddeo. Se accede a modelos avanzados para detecci\u00f3n de objetos, OCR, etiquetado de im\u00e1genes, etc.. Con Vision AI se pueden extraer texto de documentos, detectar rostros o analizar escenas de manera sencilla.</li> <li> <p>Dialogflow: Plataforma de NLP para crear agentes conversacionales (chatbots). Usa comprensi\u00f3n de lenguaje natural para interpretar la intenci\u00f3n del usuario y generar respuestas. Se integra con canales de voz y chat populares.</p> </li> <li> <p>Amazon Web Services (AWS):</p> </li> <li> <p>SageMaker (AI): Plataforma de ML totalmente gestionada que unifica datos, an\u00e1lisis e IA. Permite preparar datos, entrenar y desplegar modelos de ML a escala. SageMaker proporciona entornos de notebooks, algoritmos predefinidos y administraci\u00f3n integrada de modelos.</p> </li> <li>Rekognition: Servicio de visi\u00f3n que automatiza el reconocimiento de im\u00e1genes y v\u00eddeo sin experiencia en ML. Permite detectar objetos, texto, escenas y rostros (reconocimiento facial) en im\u00e1genes/v\u00eddeos. Incluye API f\u00e1ciles de usar para analizar archivos en Amazon S3.</li> <li>Comprehend: Servicio de NLP que extrae insights de texto. Identifica entidades, sentimientos, lenguaje, temas y relaciones en documentos no estructurados. Facilita an\u00e1lisis de opiniones, categorizaci\u00f3n de texto y generaci\u00f3n de res\u00famenes autom\u00e1ticos.</li> <li>Lex: Servicio para construir interfaces conversacionales de voz y texto. Utiliza la tecnolog\u00eda del motor de Alexa para crear chatbots inteligentes sin necesidad de experiencia profunda en ML. Lex gestiona el flujo de di\u00e1logo y reconoce intenciones del usuario mediante NLP/ASR.</li> <li>Translate: Servicio de traducci\u00f3n autom\u00e1tica neuronal de idiomas. Permite traducir texto entre decenas de idiomas de manera escalable. Por ejemplo, Amazon Translate ofrece traducci\u00f3n de alta calidad bajo demanda.</li> <li> <p>Otros servicios: AWS incluye tambi\u00e9n Polly (texto-a-voz), Transcribe (voz a texto), Comprehend Medical (NLP para datos de salud), etc., todos aprovechando modelos pre-entrenados internos.</p> </li> <li> <p>Microsoft Azure:</p> </li> <li> <p>Azure Machine Learning: Servicio PaaS para el ciclo de vida ML extremo a extremo. Facilita la creaci\u00f3n, entrenamiento, despliegue y administraci\u00f3n de modelos con herramientas colaborativas. Compatible con frameworks populares e incluye capacidades de AutoML y MLOps.</p> </li> <li> <p>Cognitive Services (Azure AI): Conjunto de APIs preconstruidas para visi\u00f3n, lenguaje, voz, decisi\u00f3n, etc. Por ejemplo, Computer Vision analiza im\u00e1genes (OCR, clasificaci\u00f3n, segmentaci\u00f3n), Text Analytics extrae sentimiento, entidades y clave de texto, Speech Services convierte voz en texto y viceversa. Estos servicios permiten a\u00f1adir r\u00e1pidamente funcionalidades de IA a aplicaciones sin entrenar modelos. Azure AI ofrece adem\u00e1s Azure OpenAI Service (acceso a modelos GPT de OpenAI en la nube de Microsoft).</p> </li> <li> <p>IBM Cloud (Watson):</p> </li> <li> <p>Watson Assistant: Plataforma para crear asistentes virtuales conversacionales. Permite definir intenciones y flujos de di\u00e1logo con NLP integrado. Est\u00e1 basada en la misma tecnolog\u00eda de IBM Watson y admite despliegues en cloud o on-premises.</p> </li> <li>Watson Natural Language Understanding (NLU): Extrae significado de texto (sentimiento, conceptos, entidades, relaciones) usando deep learning.</li> <li>Watson Speech to Text: Convierte audio en texto mediante modelos de reconocimiento de voz entrenados. Soporta m\u00faltiples idiomas y se puede personalizar para dominios espec\u00edficos.</li> <li> <p>Otros Watson: Servicios para traducci\u00f3n (Language Translator), an\u00e1lisis de im\u00e1genes (Visual Recognition), extracci\u00f3n de conocimientos (Discovery), etc.</p> </li> <li> <p>OpenAI (API):</p> </li> <li> <p>Ofrece acceso a modelos de vanguardia como GPT-4 (texto y visi\u00f3n multimodal), Codex (generaci\u00f3n de c\u00f3digo), DALL\u00b7E (im\u00e1genes a partir de texto) y Whisper (voz a texto). Estos modelos se acceden mediante una API REST.</p> </li> <li>La documentaci\u00f3n oficial de la API describe casos de uso (chatbots, generaci\u00f3n de texto, soporte al desarrollador, etc.), ejemplos de c\u00f3digo y buenas pr\u00e1cticas.</li> <li>Precios y licencias: El uso de la API se cobra por consumo de tokens. Por ejemplo, GPT-4.1 cobra aproximadamente 2 USD por 1M de tokens de entrada y 8 USD por 1M de tokens de salida. OpenAI gestiona versiones de modelo y requisitos de licencia en su portal. (Los modelos de OpenAI son propiedad de OpenAI y se usan bajo licencia comercial).</li> </ul> <p>A continuaci\u00f3n se muestra un resumen de servicios principales por proveedor (no exhaustivo):</p> Plataforma Servicios destacados GCP Vertex AI, AutoML, Vision AI, Dialogflow AWS SageMaker, Rekognition, Comprehend, Lex, Translate Azure Azure ML, Computer Vision, Speech, Language, Translator IBM Watson Assistant, NLU, Speech-to-Text, Language Translator OpenAI GPT-4, Codex, DALL\u00b7E, Whisper (v\u00eda API)"},{"location":"tema4/#casos-de-uso-y-ejemplos-practicos","title":"Casos de Uso y Ejemplos Pr\u00e1cticos","text":"<p>Los modelos pre-entrenados y servicios cloud pueden aplicarse en infinidad de escenarios. A modo de ejemplo:</p> <ul> <li>Clasificaci\u00f3n de texto con modelos pre-entrenados: usando Hugging Face Transformers se puede clasificar opiniones o detectar spam con pocas l\u00edneas de c\u00f3digo. Por ejemplo:</li> </ul> <pre><code>from transformers import pipeline\nsentiment_analyzer = pipeline(\"sentiment-analysis\") \nresult = sentiment_analyzer(\"La inteligencia artificial est\u00e1 revolucionando la tecnolog\u00eda.\")\nprint(result)  # e.g. [{'label': 'POSITIVE', 'score': 0.99}]\n</code></pre> <p>Este c\u00f3digo carga un modelo entrenado en an\u00e1lisis de sentimiento y eval\u00faa una frase.</p> <ul> <li>Detecci\u00f3n de objetos en im\u00e1genes: se puede usar un servicio en la nube o un modelo local. Por ejemplo, con AWS Rekognition en Python (bastan credenciales configuradas):</li> </ul> <pre><code>import boto3\nclient = boto3.client(\"rekognition\")\nwith open(\"imagen.jpg\", \"rb\") as img:\n    resp = client.detect_labels(Image={\"Bytes\": img.read()})\nlabels = [label['Name'] for label in resp['Labels']]\nprint(labels)  # e.g. ['Person', 'Bicycle', 'Helmet', ...]\n</code></pre> <p>Este fragmento env\u00eda la imagen a Rekognition y recibe etiquetas detectadas.</p> <ul> <li>An\u00e1lisis de im\u00e1genes con Google Vision AI: usando la librer\u00eda de cliente de GCP:</li> </ul> <pre><code>from google.cloud import vision\nclient = vision.ImageAnnotatorClient()\nwith open(\"imagen.jpg\", \"rb\") as img:\n    content = img.read()\nimage = vision.Image(content=content)\nresponse = client.label_detection(image=image)\nlabels = [l.description for l in response.label_annotations]\nprint(labels)  # e.g. ['mountain', 'snow', 'landscape', ...]\n</code></pre> <p>Con Vision AI se obtienen etiquetas, texto (OCR), rostros y otros atributos sin entrenar modelos propios.</p> <ul> <li>Chatbot conversacional con GPT-4: mediante la API de OpenAI y su biblioteca Python:</li> </ul> <pre><code>import openai\nopenai.api_key = \"TU_API_KEY\"\nresp = openai.ChatCompletion.create(\n    model=\"gpt-4o\",\n    messages=[{\"role\": \"user\", \"content\": \"\u00bfQui\u00e9n escribi\u00f3 Cien a\u00f1os de soledad?\"}]\n)\nprint(resp.choices[0].message.content)\n</code></pre> <p>Esto consulta a GPT-4 y devuelve la respuesta generada (\u201cGabriel Garc\u00eda M\u00e1rquez\u201d).</p> <p>Estos ejemplos ilustran c\u00f3mo, con pocos pasos, se aprovechan modelos pre-entrenados o servicios cloud para tareas de NLP, visi\u00f3n por computador, voz y otros. La combinaci\u00f3n de modelos potentes y recursos en la nube acelera el desarrollo de aplicaciones de IA avanzadas. Cada proveedor ofrece adem\u00e1s documentaci\u00f3n, tutoriales y SDKs detallados para integrar estos servicios, as\u00ed como mecanismos de control de versiones y seguimiento de costos (por ejemplo, alertas de presupuesto en la nube o l\u00edmites de token en las API).</p>"}]}